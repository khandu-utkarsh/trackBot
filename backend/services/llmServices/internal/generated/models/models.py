# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-06T02:41:52+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, Literal, Mapping, Optional, Union

from pydantic import BaseModel, EmailStr, Field, RootModel


class User(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    Unique identifier for the user. Created by the database.
    """
    email: Annotated[EmailStr, Field(examples=['user@gmail.com'])]
    """
    User's email address. This is the primary key for the user and obtained from the Google Auth.
    """
    created_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the user was created. Created by the database.
    """


class CreateUserRequest(BaseModel):
    email: Annotated[EmailStr, Field(examples=['user@gmail.com'])]
    """
    User's email address. This is the primary key for the user and obtained from the Google Auth.
    """


class CreateUserResponse(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    ID of the created user. Created by the database.
    """
    email: Annotated[EmailStr, Field(examples=['user@gmail.com'])]
    """
    User's email address. This is the primary key for the user and obtained from the Google Auth.
    """


class Workout(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    Unique identifier for the workout. Created by the database.
    """
    user_id: Annotated[int, Field(examples=[1])]
    """
    ID of the user who owns this workout. Obtained from the user table.
    """
    created_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the workout was created. Created by the database.
    """
    updated_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the workout was last updated. Created by the database.
    """


class WorkoutListParams(BaseModel):
    user_id: Annotated[Optional[int], Field(examples=[1])] = None
    """
    ID of the user to filter workouts
    """
    year: Annotated[Optional[str], Field(examples=['2024'], pattern='^\\d{4}$')] = None
    """
    Filter by year (YYYY format)
    """
    month: Annotated[
        Optional[str], Field(examples=['01'], pattern='^(0[1-9]|1[0-2])$')
    ] = None
    """
    Filter by month (MM format)
    """
    day: Annotated[
        Optional[str], Field(examples=['15'], pattern='^(0[1-9]|[12][0-9]|3[01])$')
    ] = None
    """
    Filter by day (DD format)
    """


class CreateWorkoutRequest(BaseModel):
    user_id: Annotated[Optional[int], Field(examples=[1])] = None
    """
    ID of the user creating the workout
    """


class UpdateWorkoutRequest(BaseModel):
    user_id: Annotated[Optional[int], Field(examples=[1])] = None
    """
    ID of the user who owns the workout
    """


class CreateWorkoutResponse(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    ID of the created workout
    """


class ExerciseType(Enum):
    """
    Type of exercise
    """

    cardio = 'cardio'
    weights = 'weights'


class BaseExercise(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    Unique identifier for the exercise. Created by the database.
    """
    workout_id: Annotated[int, Field(examples=[1])]
    """
    ID of the workout this exercise belongs to. Obtained from the workout table.
    """
    name: Annotated[str, Field(examples=['Push-ups'])]
    """
    Name of the exercise
    """
    type: ExerciseType
    notes: Annotated[Optional[str], Field(examples=['Focus on form'])] = None
    """
    Additional notes about the exercise
    """
    created_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the exercise was created. Created by the database.
    """


class Type(Enum):
    cardio = 'cardio'


class CardioExercise(BaseExercise):
    type: Literal['cardio']
    distance: Annotated[float, Field(examples=[5000.0], ge=0.0)]
    """
    Distance covered in meters
    """
    duration: Annotated[int, Field(examples=[1800], ge=1)]
    """
    Duration in seconds
    """


class Type1(Enum):
    weights = 'weights'


class WeightExercise(BaseExercise):
    type: Literal['weights']
    sets: Annotated[int, Field(examples=[3], ge=1)]
    """
    Number of sets
    """
    reps: Annotated[int, Field(examples=[12], ge=1)]
    """
    Number of repetitions per set
    """
    weight: Annotated[float, Field(examples=[25.5], ge=0.0)]
    """
    Weight in kilograms
    """


class Exercise(RootModel[Union[CardioExercise, WeightExercise]]):
    root: Annotated[Union[CardioExercise, WeightExercise], Field(discriminator='type')]


class Type2(Enum):
    cardio = 'cardio'


class CreateCardioExerciseRequest(BaseModel):
    name: Annotated[str, Field(examples=['Running'])]
    """
    Name of the exercise
    """
    type: Literal['cardio']
    notes: Annotated[Optional[str], Field(examples=['Morning run in the park'])] = None
    """
    Additional notes
    """
    distance: Annotated[float, Field(examples=[5000.0], ge=0.0)]
    """
    Distance in meters
    """
    duration: Annotated[int, Field(examples=[1800], ge=1)]
    """
    Duration in seconds
    """


class Type3(Enum):
    weights = 'weights'


class CreateWeightExerciseRequest(BaseModel):
    name: Annotated[str, Field(examples=['Bench Press'])]
    """
    Name of the exercise
    """
    type: Literal['weights']
    notes: Annotated[
        Optional[str], Field(examples=['Focus on controlled movement'])
    ] = None
    """
    Additional notes
    """
    sets: Annotated[int, Field(examples=[3], ge=1)]
    """
    Number of sets
    """
    reps: Annotated[int, Field(examples=[12], ge=1)]
    """
    Number of repetitions per set
    """
    weight: Annotated[float, Field(examples=[80.0], ge=0.0)]
    """
    Weight in kilograms
    """


class CreateExerciseRequest(
    RootModel[Union[CreateCardioExerciseRequest, CreateWeightExerciseRequest]]
):
    root: Annotated[
        Union[CreateCardioExerciseRequest, CreateWeightExerciseRequest],
        Field(discriminator='type'),
    ]


class UpdateExerciseRequest(
    RootModel[Union[CreateCardioExerciseRequest, CreateWeightExerciseRequest]]
):
    root: Annotated[
        Union[CreateCardioExerciseRequest, CreateWeightExerciseRequest],
        Field(discriminator='type'),
    ]


class CreateExerciseResponse(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    ID of the created exercise
    """


class Conversation(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    Unique identifier for the conversation. Created by the database.
    """
    user_id: Annotated[int, Field(examples=[1])]
    """
    ID of the user who owns this conversation. Obtained from the user table.
    """
    title: Annotated[str, Field(examples=['Workout Planning Session'])]
    """
    Title of the conversation. This is the title of the conversation.
    """
    created_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the conversation was created. Created by the database.
    """


class CreateConversationRequest(BaseModel):
    title: Annotated[str, Field(examples=['Workout Planning Session'])]
    """
    Title of the conversation
    """


class CreateConversationResponse(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    ID of the created conversation. Created by the database.
    """


class MessageType(Enum):
    """
    Type of message sender
    """

    user = 'user'
    assistant = 'assistant'
    system = 'system'


class Message(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    Unique identifier for the message. Created by the database.
    """
    conversation_id: Annotated[int, Field(examples=[1])]
    """
    ID of the conversation this message belongs to. Obtained from the conversation table.
    """
    user_id: Annotated[int, Field(examples=[1])]
    """
    ID of the user who sent this message. Obtained from the user table.
    """
    content: Annotated[str, Field(examples=['I want to start a new workout plan'])]
    """
    Content of the message. This is the message that the user or assistant sends.
    """
    message_type: MessageType
    created_at: Annotated[datetime, Field(examples=['2024-01-15T10:30:00Z'])]
    """
    Timestamp when the message was created. Created by the database.
    """


class CreateMessageRequest(BaseModel):
    content: Annotated[str, Field(examples=['I want to start a new workout plan'])]
    """
    Content of the message. This is the message that the user or assistant sends.
    """
    message_type: MessageType


class CreateMessageResponse(BaseModel):
    id: Annotated[int, Field(examples=[1])]
    """
    ID of the created message. Created by the database.
    """


class Error(BaseModel):
    code: Annotated[str, Field(examples=['INVALID_INPUT'])]
    """
    Error code
    """
    message: Annotated[str, Field(examples=['The provided input is invalid'])]
    """
    Human-readable error message
    """
    details: Optional[Mapping[str, Any]] = None
    """
    Additional error details
    """
