/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Conversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conversation{}

// Conversation Represents a conversation.
type Conversation struct {
	// Unique ID for the conversation.
	Id int64 `json:"id"`
	// ID of the user.
	UserId int64 `json:"user_id"`
	// Conversation title.
	Title string `json:"title"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _Conversation Conversation

// NewConversation instantiates a new Conversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversation(id int64, userId int64, title string, createdAt time.Time) *Conversation {
	this := Conversation{}
	this.Id = id
	this.UserId = userId
	this.Title = title
	this.CreatedAt = createdAt
	return &this
}

// NewConversationWithDefaults instantiates a new Conversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationWithDefaults() *Conversation {
	this := Conversation{}
	return &this
}

// GetId returns the Id field value
func (o *Conversation) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Conversation) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Conversation) SetId(v int64) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *Conversation) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Conversation) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Conversation) SetUserId(v int64) {
	o.UserId = v
}

// GetTitle returns the Title field value
func (o *Conversation) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Conversation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Conversation) SetTitle(v string) {
	o.Title = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Conversation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Conversation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Conversation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Conversation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	toSerialize["title"] = o.Title
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Conversation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user_id",
		"title",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversation := _Conversation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversation)

	if err != nil {
		return err
	}

	*o = Conversation(varConversation)

	return err
}

type NullableConversation struct {
	value *Conversation
	isSet bool
}

func (v NullableConversation) Get() *Conversation {
	return v.value
}

func (v *NullableConversation) Set(val *Conversation) {
	v.value = val
	v.isSet = true
}

func (v NullableConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversation(val *Conversation) *NullableConversation {
	return &NullableConversation{value: val, isSet: true}
}

func (v NullableConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


