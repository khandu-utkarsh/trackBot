# coding: utf-8

"""
    TrackBot App API

    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

    The version of the OpenAPI document: 1.0.0
    Contact: utkarshkhandelwal2011@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trackbot_api.models.exercise_type import ExerciseType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BaseExercise(BaseModel):
    """
    BaseExercise
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the exercise. Created by the database.")
    workout_id: StrictInt = Field(description="ID of the workout this exercise belongs to. Obtained from the workout table.")
    name: StrictStr = Field(description="Name of the exercise")
    type: ExerciseType
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes about the exercise")
    created_at: datetime = Field(description="Timestamp when the exercise was created. Created by the database.")
    __properties: ClassVar[List[str]] = ["id", "workout_id", "name", "type", "notes", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BaseExercise from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BaseExercise from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "workout_id": obj.get("workout_id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "notes": obj.get("notes"),
            "created_at": obj.get("created_at")
        })
        return _obj


