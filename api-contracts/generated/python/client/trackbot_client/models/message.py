# coding: utf-8

"""
    TrackBot App API

    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

    The version of the OpenAPI document: 1.0.0
    Contact: utkarshkhandelwal2011@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from trackbot_client.models.message_type import MessageType
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Represents a message in a conversation.
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the message.")
    conversation_id: StrictInt = Field(description="Conversation ID this message belongs to.")
    user_id: StrictInt = Field(description="User ID who sent the message.")
    content: StrictStr = Field(description="Content of the message.")
    message_type: MessageType
    created_at: Optional[datetime] = Field(default=None, description="Creation timestamp.")
    additional_kwargs: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata passed with the message.")
    response_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata returned by the model provider.")
    type: Optional[StrictStr] = Field(default=None, description="Type of message.")
    name: Optional[StrictStr] = Field(default=None, description="Optional name of the message sender/tool.")
    llm_id: Optional[StrictStr] = Field(default=None, description="Unique message ID from the model provider.")
    tool_calls: Optional[List[Dict[str, Any]]] = Field(default=None, description="Tool calls made by the model in this message.")
    invalid_tool_calls: Optional[List[Dict[str, Any]]] = Field(default=None, description="Tool calls that failed to parse or execute.")
    usage_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Token usage metadata.")
    example: Optional[StrictBool] = Field(default=False, description="Whether this message was part of an example conversation.")
    __properties: ClassVar[List[str]] = ["id", "conversation_id", "user_id", "content", "message_type", "created_at", "additional_kwargs", "response_metadata", "type", "name", "llm_id", "tool_calls", "invalid_tool_calls", "usage_metadata", "example"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ai', 'human']):
            raise ValueError("must be one of enum values ('ai', 'human')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "conversation_id": obj.get("conversation_id"),
            "user_id": obj.get("user_id"),
            "content": obj.get("content"),
            "message_type": obj.get("message_type"),
            "created_at": obj.get("created_at"),
            "additional_kwargs": obj.get("additional_kwargs"),
            "response_metadata": obj.get("response_metadata"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "llm_id": obj.get("llm_id"),
            "tool_calls": obj.get("tool_calls"),
            "invalid_tool_calls": obj.get("invalid_tool_calls"),
            "usage_metadata": obj.get("usage_metadata"),
            "example": obj.get("example") if obj.get("example") is not None else False
        })
        return _obj


