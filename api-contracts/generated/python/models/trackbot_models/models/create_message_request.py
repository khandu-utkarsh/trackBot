# coding: utf-8

"""
    TrackBot App API

    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

    The version of the OpenAPI document: 1.0.0
    Contact: utkarshkhandelwal2011@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from trackbot_models.models.message_type import MessageType

class CreateMessageRequest(BaseModel):
    """
    CreateMessageRequest
    """
    content: StrictStr = Field(default=..., description="Content of the message. This is the message that the user or assistant sends.")
    message_type: MessageType = Field(...)
    __properties = ["content", "message_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateMessageRequest:
        """Create an instance of CreateMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateMessageRequest:
        """Create an instance of CreateMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateMessageRequest.parse_obj(obj)

        _obj = CreateMessageRequest.parse_obj({
            "content": obj.get("content"),
            "message_type": obj.get("message_type")
        })
        return _obj


