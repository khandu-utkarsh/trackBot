# coding: utf-8

"""
    TrackBot App API

    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

    The version of the OpenAPI document: 1.0.0
    Contact: utkarshkhandelwal2011@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr, validator

class WorkoutListParams(BaseModel):
    """
    WorkoutListParams
    """
    user_id: Optional[StrictInt] = Field(default=None, description="ID of the user to filter workouts")
    year: Optional[constr(strict=True)] = Field(default=None, description="Filter by year (YYYY format)")
    month: Optional[constr(strict=True)] = Field(default=None, description="Filter by month (MM format)")
    day: Optional[constr(strict=True)] = Field(default=None, description="Filter by day (DD format)")
    __properties = ["user_id", "year", "month", "day"]

    @validator('year')
    def year_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}$/")
        return value

    @validator('month')
    def month_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0[1-9]|1[0-2])$", value):
            raise ValueError(r"must validate the regular expression /^(0[1-9]|1[0-2])$/")
        return value

    @validator('day')
    def day_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(0[1-9]|[12][0-9]|3[01])$", value):
            raise ValueError(r"must validate the regular expression /^(0[1-9]|[12][0-9]|3[01])$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkoutListParams:
        """Create an instance of WorkoutListParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkoutListParams:
        """Create an instance of WorkoutListParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkoutListParams.parse_obj(obj)

        _obj = WorkoutListParams.parse_obj({
            "user_id": obj.get("user_id"),
            "year": obj.get("year"),
            "month": obj.get("month"),
            "day": obj.get("day")
        })
        return _obj


