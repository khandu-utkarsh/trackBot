# coding: utf-8

"""
    TrackBot App API

    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

    The version of the OpenAPI document: 1.0.0
    Contact: utkarshkhandelwal2011@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, validator

class CreateWeightExerciseRequest(BaseModel):
    """
    CreateWeightExerciseRequest
    """
    name: StrictStr = Field(default=..., description="Name of the exercise")
    type: StrictStr = Field(...)
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes")
    sets: conint(strict=True, ge=1) = Field(default=..., description="Number of sets")
    reps: conint(strict=True, ge=1) = Field(default=..., description="Number of repetitions per set")
    weight: Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)] = Field(default=..., description="Weight in kilograms")
    __properties = ["name", "type", "notes", "sets", "reps", "weight"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('weights',):
            raise ValueError("must be one of enum values ('weights')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateWeightExerciseRequest:
        """Create an instance of CreateWeightExerciseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateWeightExerciseRequest:
        """Create an instance of CreateWeightExerciseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateWeightExerciseRequest.parse_obj(obj)

        _obj = CreateWeightExerciseRequest.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "notes": obj.get("notes"),
            "sets": obj.get("sets"),
            "reps": obj.get("reps"),
            "weight": obj.get("weight")
        })
        return _obj


