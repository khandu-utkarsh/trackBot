# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-11T21:47:06+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, EmailStr, Field, conint


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int = Field(
        ...,
        description='Unique identifier for the user. Created by the database.',
        examples=[1],
    )
    email: EmailStr = Field(
        ...,
        description="User's email address. This is the primary key for the user and obtained from Google Auth.",
        examples=['user@gmail.com'],
    )
    name: str = Field(
        ..., description="User's full name from Google profile.", examples=['John Doe']
    )
    picture: AnyUrl = Field(
        ...,
        description="User's profile picture URL from Google.",
        examples=['https://lh3.googleusercontent.com/...'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Timestamp when the user was created. Created by the database.',
        examples=['2024-01-15T10:30:00Z'],
    )


class CreateUserRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(
        ...,
        description="User's email address obtained from Google Auth.",
        examples=['user@gmail.com'],
    )


class CreateUserResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int = Field(
        ...,
        description='ID of the created user. Created by the database.',
        examples=[1],
    )
    email: EmailStr = Field(
        ..., description="User's email address.", examples=['user@gmail.com']
    )


class GoogleLoginRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    googleToken: str = Field(
        ...,
        description='Google JWT credential token',
        examples=['eyJhbGciOiJSUzI1NiIsImtpZCI6...'],
    )


class Conversation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int = Field(..., description='Unique ID for the conversation.', examples=[1])
    user_id: int = Field(..., description='ID of the user.', examples=[42])
    title: str = Field(
        ..., description='Conversation title.', examples=['Workout Planning']
    )
    updated_at: datetime = Field(
        ..., description='Timestamp of update.', examples=['2024-01-15T10:30:00Z']
    )


class CreateConversationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: str = Field(
        ..., description='Title of the conversation.', examples=['Workout Planning']
    )


class CreateConversationResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int
    title: str
    user_id: int
    updated_at: datetime


class UpdateConversationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: Optional[str] = Field(
        None,
        description='Updated title of the conversation.',
        examples=['Revised Plan'],
    )


class ListConversationsResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conversations: list[Conversation]


class DeleteConversationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confirm: Optional[bool] = Field(
        False,
        description='Confirmation flag to prevent accidental deletion.',
        examples=[True],
    )


class DeleteConversationResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int = Field(..., description='ID of the deleted conversation.', examples=[1])
    title: str = Field(
        ...,
        description='Title of the deleted conversation.',
        examples=['Workout Planning'],
    )
    deleted_at: datetime = Field(
        ...,
        description='Timestamp when the conversation was deleted.',
        examples=['2024-01-15T10:30:00Z'],
    )
    messages_deleted_count: int = Field(
        ...,
        description='Number of messages that were deleted along with the conversation.',
        examples=[15],
    )


class MessageType(Enum):
    user = 'user'
    assistant = 'assistant'
    other = 'other'


class Message(BaseModel):
    id: int = Field(..., description='Unique identifier for the message.', examples=[1])
    conversation_id: int = Field(
        ..., description='Conversation ID this message belongs to.', examples=[1]
    )
    user_id: int = Field(..., description='User ID who sent the message.', examples=[1])
    langchain_message: str = Field(
        ...,
        description='Langchain message json.',
        examples=['I want to start a new workout plan'],
    )
    message_type: MessageType
    created_at: Optional[datetime] = Field(
        None, description='Creation timestamp.', examples=['2024-01-15T10:30:00Z']
    )


class CreateMessageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    langchain_message: str = Field(
        ...,
        description='Langchain message json.',
        examples=['I want to start a new workout plan'],
    )
    message_type: MessageType


class ListMessagesRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conversation_id: Optional[int] = None
    user_id: Optional[int] = None
    limit: Optional[conint(ge=1, le=100)] = None
    offset: Optional[conint(ge=0)] = None


class ListMessagesResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    messages: list[Message]


class Error(BaseModel):
    code: str = Field(..., description='Error code', examples=['INVALID_INPUT'])
    message: str = Field(
        ...,
        description='Human-readable error message',
        examples=['The provided input is invalid'],
    )
    details: Optional[dict[str, Any]] = Field(
        None, description='Additional error details'
    )
