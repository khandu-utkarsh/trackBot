/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListExercisesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListExercisesResponse{}

// ListExercisesResponse A list of exercises
type ListExercisesResponse struct {
	Exercises []Exercise `json:"exercises"`
}

type _ListExercisesResponse ListExercisesResponse

// NewListExercisesResponse instantiates a new ListExercisesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListExercisesResponse(exercises []Exercise) *ListExercisesResponse {
	this := ListExercisesResponse{}
	this.Exercises = exercises
	return &this
}

// NewListExercisesResponseWithDefaults instantiates a new ListExercisesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListExercisesResponseWithDefaults() *ListExercisesResponse {
	this := ListExercisesResponse{}
	return &this
}

// GetExercises returns the Exercises field value
func (o *ListExercisesResponse) GetExercises() []Exercise {
	if o == nil {
		var ret []Exercise
		return ret
	}

	return o.Exercises
}

// GetExercisesOk returns a tuple with the Exercises field value
// and a boolean to check if the value has been set.
func (o *ListExercisesResponse) GetExercisesOk() ([]Exercise, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exercises, true
}

// SetExercises sets field value
func (o *ListExercisesResponse) SetExercises(v []Exercise) {
	o.Exercises = v
}

func (o ListExercisesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListExercisesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exercises"] = o.Exercises
	return toSerialize, nil
}

func (o *ListExercisesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exercises",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListExercisesResponse := _ListExercisesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListExercisesResponse)

	if err != nil {
		return err
	}

	*o = ListExercisesResponse(varListExercisesResponse)

	return err
}

type NullableListExercisesResponse struct {
	value *ListExercisesResponse
	isSet bool
}

func (v NullableListExercisesResponse) Get() *ListExercisesResponse {
	return v.value
}

func (v *NullableListExercisesResponse) Set(val *ListExercisesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListExercisesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListExercisesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListExercisesResponse(val *ListExercisesResponse) *NullableListExercisesResponse {
	return &NullableListExercisesResponse{value: val, isSet: true}
}

func (v NullableListExercisesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListExercisesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


