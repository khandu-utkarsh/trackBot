openapi: 3.0.3
info:
  contact:
    email: utkarshkhandelwal2011@gmail.com
    name: Utkarsh Khandelwal
  description: |
    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.

    This API provides endpoints for:
    - User management
    - Workout tracking and management
    - Exercise logging (cardio and weight training)
    - AI conversation and messaging

    All timestamps are in ISO 8601 format (UTC).
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: TrackBot App API
  version: 1.0.0
servers:
- description: Development server
  url: http://localhost:8080/api/v1
- description: Production server
  url: https://api.trackbotapp.com/v1
tags:
- description: User management operations
  name: Users
- description: Workout session management
  name: Workouts
- description: Exercise tracking and logging
  name: Exercises
- description: AI conversation management
  name: Conversations
- description: Message handling within conversations
  name: Messages
paths:
  /auth/me:
    get:
      description: Retrieve the currently authenticated user
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: User details retrieved successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get current user
      tags:
      - Users
  /auth/logout:
    post:
      description: Log out the current user
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Logout successful
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Log out the current user
      tags:
      - Users
  /auth/google:
    post:
      description: Authenticate with Google and create a new user if they don't exist
      operationId: googleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: User created successfully
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Google login
      tags:
      - Users
  /users/{userId}/workouts:
    get:
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Filter by year (YYYY format)
        example: "2024"
        in: query
        name: year
        required: false
        schema:
          pattern: "^\\d{4}$"
          type: string
      - description: Filter by month (MM format)
        example: "01"
        in: query
        name: month
        required: false
        schema:
          pattern: "^(0[1-9]|1[0-2])$"
          type: string
      - description: Filter by day (DD format)
        example: "15"
        in: query
        name: day
        required: false
        schema:
          pattern: "^(0[1-9]|[12][0-9]|3[01])$"
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkoutsResponse"
          description: List of workouts retrieved successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: List workouts for a user
      tags:
      - Workouts
    post:
      description: Create a new workout session for a user
      operationId: createWorkout
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkoutRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkoutResponse"
          description: Workout created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Create a new workout
      tags:
      - Workouts
  /users/{userId}/workouts/{workoutId}:
    delete:
      description: Delete a workout and all associated exercises
      operationId: deleteWorkout
      parameters:
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Delete workout
      tags:
      - Workouts
    get:
      description: Retrieve a specific workout by its ID
      operationId: getWorkoutById
      parameters:
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workout"
          description: Workout details retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get workout by ID
      tags:
      - Workouts
    put:
      description: Update an existing workout
      operationId: updateWorkout
      parameters:
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkoutRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workout"
          description: Workout updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Update workout
      tags:
      - Workouts
  /users/{userId}/workouts/{workoutId}/exercises:
    get:
      description: Retrieve all exercises for a specific workout
      operationId: listExercises
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListExercisesResponse"
          description: List of exercises retrieved successfully
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: List exercises for a workout
      tags:
      - Exercises
    post:
      description: Add a new exercise to a workout (cardio or weight training)
      operationId: createExercise
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExerciseRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exercise"
          description: Exercise created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Create a new exercise
      tags:
      - Exercises
  /users/{userId}/workouts/{workoutId}/exercises/{exerciseId}:
    delete:
      description: Delete an exercise from a workout
      operationId: deleteExercise
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Exercise ID
        example: 1
        in: path
        name: exerciseId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Delete exercise
      tags:
      - Exercises
    get:
      description: Retrieve a specific exercise by its ID
      operationId: getExerciseById
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Exercise ID
        example: 1
        in: path
        name: exerciseId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exercise"
          description: Exercise details retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get exercise by ID
      tags:
      - Exercises
    put:
      description: Update an existing exercise
      operationId: updateExercise
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Workout ID
        example: 1
        in: path
        name: workoutId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Exercise ID
        example: 1
        in: path
        name: exerciseId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExerciseRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exercise"
          description: Exercise updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Update exercise
      tags:
      - Exercises
  /users/{userId}/conversations:
    get:
      description: Retrieve all conversations for a specific user
      operationId: listConversations
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListConversationsResponse"
          description: List of conversations retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: List conversations for a user
      tags:
      - Conversations
    post:
      description: Start a new conversation with the AI assistant
      operationId: createConversation
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateConversationRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateConversationResponse"
          description: Conversation created successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Create a new conversation
      tags:
      - Conversations
  /users/{userId}/conversations/{conversationId}:
    delete:
      description: Delete a conversation and all associated messages
      operationId: deleteConversation
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteConversationRequest"
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteConversationResponse"
          description: Conversation deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Delete conversation
      tags:
      - Conversations
    get:
      description: Retrieve a specific conversation by its ID
      operationId: getConversationById
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
          description: Conversation details retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get conversation by ID
      tags:
      - Conversations
    put:
      description: Update an existing conversation
      operationId: updateConversation
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateConversationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
          description: Conversation updated successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Update conversation
      tags:
      - Conversations
  /users/{userId}/conversations/{conversationId}/messages:
    get:
      description: Retrieve all messages in a specific conversation
      operationId: listMessages
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMessagesResponse"
          description: List of messages retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: List messages in a conversation
      tags:
      - Messages
    post:
      description: Send a new message in a conversation
      operationId: createMessage
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMessageRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: Message created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Create a new message
      tags:
      - Messages
  /users/{userId}/conversations/{conversationId}/messages/{messageId}:
    delete:
      description: Delete a message from a conversation
      operationId: deleteMessage
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Message ID
        example: 1
        in: path
        name: messageId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Delete message
      tags:
      - Messages
    get:
      description: Retrieve a specific message by its ID
      operationId: getMessageById
      parameters:
      - description: User ID
        example: 1
        in: path
        name: userId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Conversation ID
        example: 1
        in: path
        name: conversationId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      - description: Message ID
        example: 1
        in: path
        name: messageId
        required: true
        schema:
          format: int64
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
          description: Message details retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      summary: Get message by ID
      tags:
      - Messages
components:
  parameters:
    UserIdPath:
      description: User ID
      example: 1
      in: path
      name: userId
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    WorkoutIdPath:
      description: Workout ID
      example: 1
      in: path
      name: workoutId
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    ExerciseIdPath:
      description: Exercise ID
      example: 1
      in: path
      name: exerciseId
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    ConversationIdPath:
      description: Conversation ID
      example: 1
      in: path
      name: conversationId
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    MessageIdPath:
      description: Message ID
      example: 1
      in: path
      name: messageId
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    EmailPath:
      description: User email address
      example: user@example.com
      in: path
      name: email
      required: true
      schema:
        format: email
        type: string
    YearQuery:
      description: Filter by year (YYYY format)
      example: "2024"
      in: query
      name: year
      required: false
      schema:
        pattern: "^\\d{4}$"
        type: string
    MonthQuery:
      description: Filter by month (MM format)
      example: "01"
      in: query
      name: month
      required: false
      schema:
        pattern: "^(0[1-9]|1[0-2])$"
        type: string
    DayQuery:
      description: Filter by day (DD format)
      example: "15"
      in: query
      name: day
      required: false
      schema:
        pattern: "^(0[1-9]|[12][0-9]|3[01])$"
        type: string
  responses:
    BadRequest:
      content:
        application/json:
          examples:
            invalid_input:
              summary: Invalid input
              value:
                code: INVALID_INPUT
                message: The provided input is invalid
            validation_failed:
              summary: Validation failed
              value:
                code: VALIDATION_FAILED
                message: Request validation failed
                details:
                  field: email
                  reason: Invalid email format
          schema:
            $ref: "#/components/schemas/Error"
      description: Bad request - invalid input or parameters
    Unauthorized:
      content:
        application/json:
          example:
            code: UNAUTHORIZED
            message: Authentication is required to access this resource
          schema:
            $ref: "#/components/schemas/Error"
      description: Unauthorized - authentication required
    Forbidden:
      content:
        application/json:
          example:
            code: FORBIDDEN
            message: You do not have permission to access this resource
          schema:
            $ref: "#/components/schemas/Error"
      description: Forbidden - insufficient permissions
    NotFound:
      content:
        application/json:
          examples:
            user_not_found:
              summary: User not found
              value:
                code: USER_NOT_FOUND
                message: The requested user was not found
            workout_not_found:
              summary: Workout not found
              value:
                code: WORKOUT_NOT_FOUND
                message: The requested workout was not found
            exercise_not_found:
              summary: Exercise not found
              value:
                code: EXERCISE_NOT_FOUND
                message: The requested exercise was not found
            conversation_not_found:
              summary: Conversation not found
              value:
                code: CONVERSATION_NOT_FOUND
                message: The requested conversation was not found
            message_not_found:
              summary: Message not found
              value:
                code: MESSAGE_NOT_FOUND
                message: The requested message was not found
          schema:
            $ref: "#/components/schemas/Error"
      description: Resource not found
    Conflict:
      content:
        application/json:
          examples:
            duplicate_email:
              summary: Duplicate email
              value:
                code: DUPLICATE_EMAIL
                message: A user with this email already exists
          schema:
            $ref: "#/components/schemas/Error"
      description: Conflict with current state of resource
    UnprocessableEntity:
      content:
        application/json:
          example:
            code: UNPROCESSABLE_ENTITY
            message: The request is well-formed but contains semantic errors
          schema:
            $ref: "#/components/schemas/Error"
      description: Unprocessable Entity - request is valid but cannot be processed
    InternalServerError:
      content:
        application/json:
          example:
            code: INTERNAL_ERROR
            message: An internal server error occurred
          schema:
            $ref: "#/components/schemas/Error"
      description: Internal server error
    NoContent:
      description: Operation completed successfully with no content to return
  schemas:
    User:
      additionalProperties: false
      description: Represents a registered user in the system.
      properties:
        id:
          description: Unique identifier for the user. Created by the database.
          example: 1
          format: int64
          readOnly: true
          type: integer
        email:
          description: User's email address. This is the primary key for the user
            and obtained from Google Auth.
          example: user@gmail.com
          format: email
          type: string
        name:
          description: User's full name from Google profile.
          example: John Doe
          type: string
        picture:
          description: User's profile picture URL from Google.
          example: https://lh3.googleusercontent.com/...
          format: uri
          type: string
        created_at:
          description: Timestamp when the user was created. Created by the database.
          example: 2024-01-15T10:30:00Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
      required:
      - email
      - id
      - name
      - picture
      type: object
    GoogleLoginRequest:
      additionalProperties: false
      description: Payload for Google OAuth login.
      properties:
        googleToken:
          description: Google JWT credential token
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6...
          type: string
      required:
      - googleToken
      type: object
    Workout:
      additionalProperties: false
      description: Represents a workout session.
      properties:
        id:
          description: Unique identifier for the workout.
          example: 1
          format: int64
          readOnly: true
          type: integer
        user_id:
          description: ID of the user who owns the workout.
          example: 1
          format: int64
          readOnly: true
          type: integer
        created_at:
          description: When the workout was created.
          example: 2024-01-15T10:30:00Z
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: When the workout was last updated.
          example: 2024-01-15T10:30:00Z
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - updated_at
      - user_id
      type: object
    WorkoutListParams:
      additionalProperties: false
      description: Parameters for filtering workout list.
      properties:
        user_id:
          format: int64
          type: integer
        year:
          pattern: "^\\\\d{4}$"
          type: string
        month:
          pattern: "^(0[1-9]|1[0-2])$"
          type: string
        day:
          pattern: "^(0[1-9]|[12][0-9]|3[01])$"
          type: string
      type: object
    CreateWorkoutRequest:
      additionalProperties: false
      description: Request to create a new workout.
      properties:
        user_id:
          description: ID of the user creating the workout.
          example: 1
          format: int64
          type: integer
      type: object
    UpdateWorkoutRequest:
      additionalProperties: false
      description: Request to update a workout.
      properties:
        user_id:
          description: ID of the user who owns the workout.
          example: 1
          format: int64
          type: integer
      type: object
    CreateWorkoutResponse:
      additionalProperties: false
      description: Response returned after creating a workout.
      properties:
        id:
          description: ID of the created workout.
          example: 1
          format: int64
          readOnly: true
          type: integer
      required:
      - id
      type: object
    ListWorkoutsResponse:
      additionalProperties: false
      description: Response containing a list of workouts.
      properties:
        workouts:
          items:
            $ref: "#/components/schemas/Workout"
          type: array
      required:
      - workouts
      type: object
    ExerciseType:
      description: Type of exercise
      enum:
      - cardio
      - weights
      type: string
    BaseExercise:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier for the exercise.
          example: 1
          format: int64
          readOnly: true
          type: integer
        workout_id:
          description: ID of the workout this exercise belongs to.
          example: 1
          format: int64
          readOnly: true
          type: integer
        name:
          description: Name of the exercise
          example: Push-ups
          type: string
        type:
          $ref: "#/components/schemas/ExerciseType"
        notes:
          description: Additional notes
          example: Focus on form
          type: string
        created_at:
          description: Timestamp when the exercise was created.
          example: 2024-01-15T10:30:00Z
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - name
      - type
      - workout_id
      type: object
    CardioExercise:
      allOf:
      - $ref: "#/components/schemas/BaseExercise"
      - properties:
          type:
            enum:
            - cardio
            type: string
          distance:
            description: Distance in meters
            example: 5000.0
            format: float
            minimum: 0
            type: number
          duration:
            description: Duration in seconds
            example: 1800
            minimum: 1
            type: integer
        required:
        - distance
        - duration
        type: object
    WeightExercise:
      allOf:
      - $ref: "#/components/schemas/BaseExercise"
      - properties:
          type:
            enum:
            - weights
            type: string
          sets:
            description: Number of sets
            example: 3
            minimum: 1
            type: integer
          reps:
            description: Repetitions per set
            example: 12
            minimum: 1
            type: integer
          weight:
            description: Weight in kilograms
            example: 25.5
            format: float
            minimum: 0
            type: number
        required:
        - reps
        - sets
        - weight
        type: object
    Exercise:
      discriminator:
        mapping:
          cardio: "#/components/schemas/CardioExercise"
          weights: "#/components/schemas/WeightExercise"
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/CardioExercise"
      - $ref: "#/components/schemas/WeightExercise"
    CreateCardioExerciseRequest:
      additionalProperties: false
      properties:
        name:
          description: Name of the exercise
          example: Running
          type: string
        type:
          enum:
          - cardio
          type: string
        notes:
          description: Additional notes
          example: Morning run in the park
          type: string
        distance:
          description: Distance in meters
          example: 5000.0
          format: float
          minimum: 0
          type: number
        duration:
          description: Duration in seconds
          example: 1800
          minimum: 1
          type: integer
      required:
      - distance
      - duration
      - name
      - type
      type: object
    CreateWeightExerciseRequest:
      additionalProperties: false
      properties:
        name:
          description: Name of the exercise
          example: Bench Press
          type: string
        type:
          enum:
          - weights
          type: string
        notes:
          description: Additional notes
          example: Focus on controlled movement
          type: string
        sets:
          description: Number of sets
          example: 3
          minimum: 1
          type: integer
        reps:
          description: Reps per set
          example: 12
          minimum: 1
          type: integer
        weight:
          description: Weight in kg
          example: 80.0
          format: float
          minimum: 0
          type: number
      required:
      - name
      - reps
      - sets
      - type
      - weight
      type: object
    CreateExerciseRequest:
      discriminator:
        mapping:
          cardio: "#/components/schemas/CreateCardioExerciseRequest"
          weights: "#/components/schemas/CreateWeightExerciseRequest"
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/CreateCardioExerciseRequest"
      - $ref: "#/components/schemas/CreateWeightExerciseRequest"
    ListExercisesResponse:
      additionalProperties: false
      description: A list of exercises
      properties:
        exercises:
          items:
            $ref: "#/components/schemas/Exercise"
          type: array
      required:
      - exercises
      type: object
    Conversation:
      additionalProperties: false
      description: Represents a conversation.
      properties:
        id:
          description: Unique ID for the conversation.
          example: 1
          format: int64
          readOnly: true
          type: integer
        user_id:
          description: ID of the user.
          example: 42
          format: int64
          readOnly: true
          type: integer
        title:
          description: Conversation title.
          example: Workout Planning
          type: string
        created_at:
          description: Timestamp of creation.
          example: 2024-01-15T10:30:00Z
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - title
      - user_id
      type: object
    CreateConversationRequest:
      additionalProperties: false
      description: Request to create a conversation.
      properties:
        title:
          description: Title of the conversation.
          example: Workout Planning
          type: string
      required:
      - title
      type: object
    CreateConversationResponse:
      additionalProperties: false
      description: Response after creating a conversation.
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        title:
          type: string
        user_id:
          format: int64
          readOnly: true
          type: integer
        created_at:
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - title
      - user_id
      type: object
    UpdateConversationRequest:
      additionalProperties: false
      description: Request to update a conversation.
      properties:
        title:
          description: Updated title of the conversation.
          example: Revised Plan
          type: string
      type: object
    ListConversationsResponse:
      additionalProperties: false
      description: Response containing a list of conversations.
      properties:
        conversations:
          items:
            $ref: "#/components/schemas/Conversation"
          type: array
      required:
      - conversations
      type: object
    DeleteConversationRequest:
      additionalProperties: false
      description: Request to delete a conversation and all its messages.
      properties:
        confirm:
          default: false
          description: Confirmation flag to prevent accidental deletion.
          example: true
          type: boolean
      type: object
    DeleteConversationResponse:
      additionalProperties: false
      description: Response after successfully deleting a conversation and its messages.
      properties:
        id:
          description: ID of the deleted conversation.
          example: 1
          format: int64
          type: integer
        title:
          description: Title of the deleted conversation.
          example: Workout Planning
          type: string
        deleted_at:
          description: Timestamp when the conversation was deleted.
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        messages_deleted_count:
          description: Number of messages that were deleted along with the conversation.
          example: 15
          type: integer
      required:
      - deleted_at
      - id
      - messages_deleted_count
      - title
      type: object
    MessageType:
      description: Type of message sender
      enum:
      - user
      - assistant
      - system
      type: string
    Message:
      additionalProperties: false
      description: Represents a message in a conversation.
      properties:
        id:
          description: Unique identifier for the message.
          example: 1
          format: int64
          readOnly: true
          type: integer
        conversation_id:
          description: Conversation ID this message belongs to.
          example: 1
          format: int64
          type: integer
        user_id:
          description: User ID who sent the message.
          example: 1
          format: int64
          type: integer
        content:
          description: Content of the message.
          example: I want to start a new workout plan
          type: string
        message_type:
          $ref: "#/components/schemas/MessageType"
        created_at:
          description: Creation timestamp.
          example: 2024-01-15T10:30:00Z
          format: date-time
          readOnly: true
          type: string
        additional_kwargs:
          description: Additional metadata passed with the message.
          type: object
        response_metadata:
          description: Metadata returned by the model provider.
          example:
            model: gpt-4
            finish_reason: stop
            token_usage:
              prompt_tokens: 20
              completion_tokens: 50
              total_tokens: 70
          type: object
        type:
          description: Type of message.
          enum:
          - ai
          - human
          type: string
        name:
          description: Optional name of the message sender/tool.
          nullable: true
          type: string
        llm_id:
          description: Unique message ID from the model provider.
          example: msg-abcdef
          type: string
        tool_calls:
          description: Tool calls made by the model in this message.
          items:
            type: object
          type: array
        invalid_tool_calls:
          description: Tool calls that failed to parse or execute.
          items:
            type: object
          type: array
        usage_metadata:
          description: Token usage metadata.
          example:
            input_tokens: 24
            output_tokens: 60
            total_tokens: 84
          type: object
        example:
          default: false
          description: Whether this message was part of an example conversation.
          type: boolean
      required:
      - content
      - conversation_id
      - id
      - message_type
      - user_id
      type: object
    CreateMessageRequest:
      additionalProperties: false
      description: Payload to create a new message.
      properties:
        content:
          description: Content of the message.
          example: I want to start a new workout plan
          type: string
        message_type:
          $ref: "#/components/schemas/MessageType"
      required:
      - content
      - message_type
      type: object
    ListMessagesRequest:
      additionalProperties: false
      properties:
        conversation_id:
          format: int64
          type: integer
        user_id:
          format: int64
          type: integer
        limit:
          maximum: 100
          minimum: 1
          type: integer
        offset:
          minimum: 0
          type: integer
      type: object
    ListMessagesResponse:
      additionalProperties: false
      description: Response containing a list of messages.
      properties:
        messages:
          items:
            $ref: "#/components/schemas/Message"
          type: array
      required:
      - messages
      type: object
    LLMServiceMessageRequest:
      additionalProperties: false
      description: Request to the LLM service to process a conversation.
      properties:
        messages:
          items:
            $ref: "#/components/schemas/Message"
          type: array
        user_id:
          description: ID of the user making the request.
          example: 123
          format: int64
          type: integer
        conversation_id:
          description: ID of the conversation to which these messages belong.
          example: 456
          format: int64
          type: integer
      required:
      - conversation_id
      - messages
      - user_id
      type: object
    LLMServiceMessageResponse:
      additionalProperties: false
      description: Response from the LLM service to process a conversation.
      properties:
        message:
          $ref: "#/components/schemas/Message"
        response_time_ms:
          description: Time taken to generate the response in milliseconds.
          example: 120
          format: int64
          type: integer
        model_name:
          description: Identifier of the model used to generate the response.
          example: gpt-4
          type: string
      required:
      - message
      type: object
    Error:
      properties:
        code:
          description: Error code
          example: INVALID_INPUT
          type: string
        message:
          description: Human-readable error message
          example: The provided input is invalid
          type: string
        details:
          additionalProperties: true
          description: Additional error details
          type: object
      required:
      - code
      - message
      type: object
