/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateExercise201Response - struct for CreateExercise201Response
type CreateExercise201Response struct {
	CardioExerciseResponse *CardioExerciseResponse
	WeightExerciseResponse *WeightExerciseResponse
}

// CardioExerciseResponseAsCreateExercise201Response is a convenience function that returns CardioExerciseResponse wrapped in CreateExercise201Response
func CardioExerciseResponseAsCreateExercise201Response(v *CardioExerciseResponse) CreateExercise201Response {
	return CreateExercise201Response{
		CardioExerciseResponse: v,
	}
}

// WeightExerciseResponseAsCreateExercise201Response is a convenience function that returns WeightExerciseResponse wrapped in CreateExercise201Response
func WeightExerciseResponseAsCreateExercise201Response(v *WeightExerciseResponse) CreateExercise201Response {
	return CreateExercise201Response{
		WeightExerciseResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateExercise201Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CardioExerciseResponse
	err = newStrictDecoder(data).Decode(&dst.CardioExerciseResponse)
	if err == nil {
		jsonCardioExerciseResponse, _ := json.Marshal(dst.CardioExerciseResponse)
		if string(jsonCardioExerciseResponse) == "{}" { // empty struct
			dst.CardioExerciseResponse = nil
		} else {
			if err = validator.Validate(dst.CardioExerciseResponse); err != nil {
				dst.CardioExerciseResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.CardioExerciseResponse = nil
	}

	// try to unmarshal data into WeightExerciseResponse
	err = newStrictDecoder(data).Decode(&dst.WeightExerciseResponse)
	if err == nil {
		jsonWeightExerciseResponse, _ := json.Marshal(dst.WeightExerciseResponse)
		if string(jsonWeightExerciseResponse) == "{}" { // empty struct
			dst.WeightExerciseResponse = nil
		} else {
			if err = validator.Validate(dst.WeightExerciseResponse); err != nil {
				dst.WeightExerciseResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.WeightExerciseResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CardioExerciseResponse = nil
		dst.WeightExerciseResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateExercise201Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateExercise201Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateExercise201Response) MarshalJSON() ([]byte, error) {
	if src.CardioExerciseResponse != nil {
		return json.Marshal(&src.CardioExerciseResponse)
	}

	if src.WeightExerciseResponse != nil {
		return json.Marshal(&src.WeightExerciseResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateExercise201Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CardioExerciseResponse != nil {
		return obj.CardioExerciseResponse
	}

	if obj.WeightExerciseResponse != nil {
		return obj.WeightExerciseResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateExercise201Response) GetActualInstanceValue() (interface{}) {
	if obj.CardioExerciseResponse != nil {
		return *obj.CardioExerciseResponse
	}

	if obj.WeightExerciseResponse != nil {
		return *obj.WeightExerciseResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateExercise201Response struct {
	value *CreateExercise201Response
	isSet bool
}

func (v NullableCreateExercise201Response) Get() *CreateExercise201Response {
	return v.value
}

func (v *NullableCreateExercise201Response) Set(val *CreateExercise201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExercise201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExercise201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExercise201Response(val *CreateExercise201Response) *NullableCreateExercise201Response {
	return &NullableCreateExercise201Response{value: val, isSet: true}
}

func (v NullableCreateExercise201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExercise201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


