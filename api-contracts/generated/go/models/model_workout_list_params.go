/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
)

// checks if the WorkoutListParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkoutListParams{}

// WorkoutListParams Parameters for filtering workout list.
type WorkoutListParams struct {
	UserId *int64 `json:"user_id,omitempty"`
	Year *string `json:"year,omitempty" validate:"regexp=^\\\\\\\\d{4}$"`
	Month *string `json:"month,omitempty" validate:"regexp=^(0[1-9]|1[0-2])$"`
	Day *string `json:"day,omitempty" validate:"regexp=^(0[1-9]|[12][0-9]|3[01])$"`
}

// NewWorkoutListParams instantiates a new WorkoutListParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkoutListParams() *WorkoutListParams {
	this := WorkoutListParams{}
	return &this
}

// NewWorkoutListParamsWithDefaults instantiates a new WorkoutListParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkoutListParamsWithDefaults() *WorkoutListParams {
	this := WorkoutListParams{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *WorkoutListParams) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkoutListParams) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *WorkoutListParams) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *WorkoutListParams) SetUserId(v int64) {
	o.UserId = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *WorkoutListParams) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkoutListParams) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *WorkoutListParams) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *WorkoutListParams) SetYear(v string) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *WorkoutListParams) GetMonth() string {
	if o == nil || IsNil(o.Month) {
		var ret string
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkoutListParams) GetMonthOk() (*string, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *WorkoutListParams) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given string and assigns it to the Month field.
func (o *WorkoutListParams) SetMonth(v string) {
	o.Month = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *WorkoutListParams) GetDay() string {
	if o == nil || IsNil(o.Day) {
		var ret string
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkoutListParams) GetDayOk() (*string, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *WorkoutListParams) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given string and assigns it to the Day field.
func (o *WorkoutListParams) SetDay(v string) {
	o.Day = &v
}

func (o WorkoutListParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkoutListParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	return toSerialize, nil
}

type NullableWorkoutListParams struct {
	value *WorkoutListParams
	isSet bool
}

func (v NullableWorkoutListParams) Get() *WorkoutListParams {
	return v.value
}

func (v *NullableWorkoutListParams) Set(val *WorkoutListParams) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkoutListParams) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkoutListParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkoutListParams(val *WorkoutListParams) *NullableWorkoutListParams {
	return &NullableWorkoutListParams{value: val, isSet: true}
}

func (v NullableWorkoutListParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkoutListParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


