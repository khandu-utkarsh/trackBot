/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListWorkoutsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListWorkoutsResponse{}

// ListWorkoutsResponse Response containing a list of workouts.
type ListWorkoutsResponse struct {
	Workouts []Workout `json:"workouts"`
}

type _ListWorkoutsResponse ListWorkoutsResponse

// NewListWorkoutsResponse instantiates a new ListWorkoutsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListWorkoutsResponse(workouts []Workout) *ListWorkoutsResponse {
	this := ListWorkoutsResponse{}
	this.Workouts = workouts
	return &this
}

// NewListWorkoutsResponseWithDefaults instantiates a new ListWorkoutsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListWorkoutsResponseWithDefaults() *ListWorkoutsResponse {
	this := ListWorkoutsResponse{}
	return &this
}

// GetWorkouts returns the Workouts field value
func (o *ListWorkoutsResponse) GetWorkouts() []Workout {
	if o == nil {
		var ret []Workout
		return ret
	}

	return o.Workouts
}

// GetWorkoutsOk returns a tuple with the Workouts field value
// and a boolean to check if the value has been set.
func (o *ListWorkoutsResponse) GetWorkoutsOk() ([]Workout, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workouts, true
}

// SetWorkouts sets field value
func (o *ListWorkoutsResponse) SetWorkouts(v []Workout) {
	o.Workouts = v
}

func (o ListWorkoutsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListWorkoutsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workouts"] = o.Workouts
	return toSerialize, nil
}

func (o *ListWorkoutsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workouts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListWorkoutsResponse := _ListWorkoutsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListWorkoutsResponse)

	if err != nil {
		return err
	}

	*o = ListWorkoutsResponse(varListWorkoutsResponse)

	return err
}

type NullableListWorkoutsResponse struct {
	value *ListWorkoutsResponse
	isSet bool
}

func (v NullableListWorkoutsResponse) Get() *ListWorkoutsResponse {
	return v.value
}

func (v *NullableListWorkoutsResponse) Set(val *ListWorkoutsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListWorkoutsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListWorkoutsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWorkoutsResponse(val *ListWorkoutsResponse) *NullableListWorkoutsResponse {
	return &NullableListWorkoutsResponse{value: val, isSet: true}
}

func (v NullableListWorkoutsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWorkoutsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


