/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Exercise - struct for Exercise
type Exercise struct {
	CardioExercise *CardioExercise
	WeightExercise *WeightExercise
}

// CardioExerciseAsExercise is a convenience function that returns CardioExercise wrapped in Exercise
func CardioExerciseAsExercise(v *CardioExercise) Exercise {
	return Exercise{
		CardioExercise: v,
	}
}

// WeightExerciseAsExercise is a convenience function that returns WeightExercise wrapped in Exercise
func WeightExerciseAsExercise(v *WeightExercise) Exercise {
	return Exercise{
		WeightExercise: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Exercise) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CardioExercise
	err = newStrictDecoder(data).Decode(&dst.CardioExercise)
	if err == nil {
		jsonCardioExercise, _ := json.Marshal(dst.CardioExercise)
		if string(jsonCardioExercise) == "{}" { // empty struct
			dst.CardioExercise = nil
		} else {
			if err = validator.Validate(dst.CardioExercise); err != nil {
				dst.CardioExercise = nil
			} else {
				match++
			}
		}
	} else {
		dst.CardioExercise = nil
	}

	// try to unmarshal data into WeightExercise
	err = newStrictDecoder(data).Decode(&dst.WeightExercise)
	if err == nil {
		jsonWeightExercise, _ := json.Marshal(dst.WeightExercise)
		if string(jsonWeightExercise) == "{}" { // empty struct
			dst.WeightExercise = nil
		} else {
			if err = validator.Validate(dst.WeightExercise); err != nil {
				dst.WeightExercise = nil
			} else {
				match++
			}
		}
	} else {
		dst.WeightExercise = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CardioExercise = nil
		dst.WeightExercise = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Exercise)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Exercise)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Exercise) MarshalJSON() ([]byte, error) {
	if src.CardioExercise != nil {
		return json.Marshal(&src.CardioExercise)
	}

	if src.WeightExercise != nil {
		return json.Marshal(&src.WeightExercise)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Exercise) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CardioExercise != nil {
		return obj.CardioExercise
	}

	if obj.WeightExercise != nil {
		return obj.WeightExercise
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Exercise) GetActualInstanceValue() (interface{}) {
	if obj.CardioExercise != nil {
		return *obj.CardioExercise
	}

	if obj.WeightExercise != nil {
		return *obj.WeightExercise
	}

	// all schemas are nil
	return nil
}

type NullableExercise struct {
	value *Exercise
	isSet bool
}

func (v NullableExercise) Get() *Exercise {
	return v.value
}

func (v *NullableExercise) Set(val *Exercise) {
	v.value = val
	v.isSet = true
}

func (v NullableExercise) IsSet() bool {
	return v.isSet
}

func (v *NullableExercise) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExercise(val *Exercise) *NullableExercise {
	return &NullableExercise{value: val, isSet: true}
}

func (v NullableExercise) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExercise) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


