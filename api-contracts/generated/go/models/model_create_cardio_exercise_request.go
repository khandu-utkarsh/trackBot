/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCardioExerciseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCardioExerciseRequest{}

// CreateCardioExerciseRequest struct for CreateCardioExerciseRequest
type CreateCardioExerciseRequest struct {
	// Name of the exercise
	Name string `json:"name"`
	Type string `json:"type"`
	// Additional notes
	Notes *string `json:"notes,omitempty"`
	// Distance in meters
	Distance float32 `json:"distance"`
	// Duration in seconds
	Duration int32 `json:"duration"`
}

type _CreateCardioExerciseRequest CreateCardioExerciseRequest

// NewCreateCardioExerciseRequest instantiates a new CreateCardioExerciseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCardioExerciseRequest(name string, type_ string, distance float32, duration int32) *CreateCardioExerciseRequest {
	this := CreateCardioExerciseRequest{}
	this.Name = name
	this.Type = type_
	this.Distance = distance
	this.Duration = duration
	return &this
}

// NewCreateCardioExerciseRequestWithDefaults instantiates a new CreateCardioExerciseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCardioExerciseRequestWithDefaults() *CreateCardioExerciseRequest {
	this := CreateCardioExerciseRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateCardioExerciseRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCardioExerciseRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCardioExerciseRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CreateCardioExerciseRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateCardioExerciseRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateCardioExerciseRequest) SetType(v string) {
	o.Type = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CreateCardioExerciseRequest) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCardioExerciseRequest) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CreateCardioExerciseRequest) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *CreateCardioExerciseRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetDistance returns the Distance field value
func (o *CreateCardioExerciseRequest) GetDistance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *CreateCardioExerciseRequest) GetDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *CreateCardioExerciseRequest) SetDistance(v float32) {
	o.Distance = v
}

// GetDuration returns the Duration field value
func (o *CreateCardioExerciseRequest) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *CreateCardioExerciseRequest) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *CreateCardioExerciseRequest) SetDuration(v int32) {
	o.Duration = v
}

func (o CreateCardioExerciseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCardioExerciseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	toSerialize["distance"] = o.Distance
	toSerialize["duration"] = o.Duration
	return toSerialize, nil
}

func (o *CreateCardioExerciseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"distance",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCardioExerciseRequest := _CreateCardioExerciseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCardioExerciseRequest)

	if err != nil {
		return err
	}

	*o = CreateCardioExerciseRequest(varCreateCardioExerciseRequest)

	return err
}

type NullableCreateCardioExerciseRequest struct {
	value *CreateCardioExerciseRequest
	isSet bool
}

func (v NullableCreateCardioExerciseRequest) Get() *CreateCardioExerciseRequest {
	return v.value
}

func (v *NullableCreateCardioExerciseRequest) Set(val *CreateCardioExerciseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCardioExerciseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCardioExerciseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCardioExerciseRequest(val *CreateCardioExerciseRequest) *NullableCreateCardioExerciseRequest {
	return &NullableCreateCardioExerciseRequest{value: val, isSet: true}
}

func (v NullableCreateCardioExerciseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCardioExerciseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


