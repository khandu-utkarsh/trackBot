/*
TrackBot App API

Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.  This API provides endpoints for: - User management - Workout tracking and management - Exercise logging (cardio and weight training) - AI conversation and messaging  All timestamps are in ISO 8601 format (UTC). 

API version: 1.0.0
Contact: utkarshkhandelwal2011@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_models

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreateExerciseRequest - struct for CreateExerciseRequest
type CreateExerciseRequest struct {
	CreateCardioExerciseRequest *CreateCardioExerciseRequest
	CreateWeightExerciseRequest *CreateWeightExerciseRequest
}

// CreateCardioExerciseRequestAsCreateExerciseRequest is a convenience function that returns CreateCardioExerciseRequest wrapped in CreateExerciseRequest
func CreateCardioExerciseRequestAsCreateExerciseRequest(v *CreateCardioExerciseRequest) CreateExerciseRequest {
	return CreateExerciseRequest{
		CreateCardioExerciseRequest: v,
	}
}

// CreateWeightExerciseRequestAsCreateExerciseRequest is a convenience function that returns CreateWeightExerciseRequest wrapped in CreateExerciseRequest
func CreateWeightExerciseRequestAsCreateExerciseRequest(v *CreateWeightExerciseRequest) CreateExerciseRequest {
	return CreateExerciseRequest{
		CreateWeightExerciseRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateExerciseRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateCardioExerciseRequest
	err = newStrictDecoder(data).Decode(&dst.CreateCardioExerciseRequest)
	if err == nil {
		jsonCreateCardioExerciseRequest, _ := json.Marshal(dst.CreateCardioExerciseRequest)
		if string(jsonCreateCardioExerciseRequest) == "{}" { // empty struct
			dst.CreateCardioExerciseRequest = nil
		} else {
			if err = validator.Validate(dst.CreateCardioExerciseRequest); err != nil {
				dst.CreateCardioExerciseRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateCardioExerciseRequest = nil
	}

	// try to unmarshal data into CreateWeightExerciseRequest
	err = newStrictDecoder(data).Decode(&dst.CreateWeightExerciseRequest)
	if err == nil {
		jsonCreateWeightExerciseRequest, _ := json.Marshal(dst.CreateWeightExerciseRequest)
		if string(jsonCreateWeightExerciseRequest) == "{}" { // empty struct
			dst.CreateWeightExerciseRequest = nil
		} else {
			if err = validator.Validate(dst.CreateWeightExerciseRequest); err != nil {
				dst.CreateWeightExerciseRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateWeightExerciseRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateCardioExerciseRequest = nil
		dst.CreateWeightExerciseRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateExerciseRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateExerciseRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateExerciseRequest) MarshalJSON() ([]byte, error) {
	if src.CreateCardioExerciseRequest != nil {
		return json.Marshal(&src.CreateCardioExerciseRequest)
	}

	if src.CreateWeightExerciseRequest != nil {
		return json.Marshal(&src.CreateWeightExerciseRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateExerciseRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateCardioExerciseRequest != nil {
		return obj.CreateCardioExerciseRequest
	}

	if obj.CreateWeightExerciseRequest != nil {
		return obj.CreateWeightExerciseRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateExerciseRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateCardioExerciseRequest != nil {
		return *obj.CreateCardioExerciseRequest
	}

	if obj.CreateWeightExerciseRequest != nil {
		return *obj.CreateWeightExerciseRequest
	}

	// all schemas are nil
	return nil
}

type NullableCreateExerciseRequest struct {
	value *CreateExerciseRequest
	isSet bool
}

func (v NullableCreateExerciseRequest) Get() *CreateExerciseRequest {
	return v.value
}

func (v *NullableCreateExerciseRequest) Set(val *CreateExerciseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExerciseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExerciseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExerciseRequest(val *CreateExerciseRequest) *NullableCreateExerciseRequest {
	return &NullableCreateExerciseRequest{value: val, isSet: true}
}

func (v NullableCreateExerciseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExerciseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


