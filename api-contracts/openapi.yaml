openapi: 3.0.3
info:
  title: TrackBot App API
  description: |
    Comprehensive API for the TrackBot Application helping in logging workouts, exercises and nutrition using AI.
    
    This API provides endpoints for:
    - User management
    - Workout tracking and management
    - Exercise logging (cardio and weight training)
    - AI conversation and messaging
    
    All timestamps are in ISO 8601 format (UTC).
  version: 1.0.0
  contact:
    name: Utkarsh Khandelwal
    email: utkarshkhandelwal2011@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.trackbotapp.com/
    description: Production server

tags:
  - name: Users
    description: User management operations
  - name: Conversations
    description: AI conversation management
  - name: Messages
    description: Message handling within conversations

paths:
  # User endpoints
  /auth/me:
    get:
      summary: Get current user
      description: Retrieve the currently authenticated user
      operationId: getCurrentUser
      tags: [Users]
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/user.yaml#/components/schemas/User'
        '401':
          $ref: './components/responses/errors.yaml#/components/responses/Unauthorized'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  /auth/logout:
    post:
      summary: Log out the current user
      description: Log out the current user
      operationId: logout
      tags: [Users]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: './components/schemas/user.yaml#/components/schemas/User'
        '401':
          $ref: './components/responses/errors.yaml#/components/responses/Unauthorized'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  /auth/google:
    post:
      summary: Google login
      description: Authenticate with Google and create a new user if they don't exist
      operationId: googleLogin
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/user.yaml#/components/schemas/GoogleLoginRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/user.yaml#/components/schemas/User'
        '409':
          $ref: './components/responses/errors.yaml#/components/responses/Conflict'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  # Conversation endpoints
  /users/{userId}/conversations:
    get:
      summary: List conversations for a user
      description: Retrieve all conversations for a specific user
      operationId: listConversations
      tags: [Conversations]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
      responses:
        '200':
          description: List of conversations retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/conversation.yaml#/components/schemas/ListConversationsResponse'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    post:
      summary: Create a new conversation
      description: Start a new conversation with the AI assistant
      operationId: createConversation
      tags: [Conversations]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/conversation.yaml#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/conversation.yaml#/components/schemas/CreateConversationResponse'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  /users/{userId}/conversations/{conversationId}:
    get:
      summary: Get conversation by ID
      description: Retrieve a specific conversation by its ID
      operationId: getConversationById
      tags: [Conversations]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
      responses:
        '200':
          description: Conversation details retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/conversation.yaml#/components/schemas/Conversation'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    put:
      summary: Update conversation
      description: Update an existing conversation
      operationId: updateConversation
      tags: [Conversations]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/conversation.yaml#/components/schemas/UpdateConversationRequest'
      responses:
        '200':
          description: Conversation updated successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/conversation.yaml#/components/schemas/Conversation'
        '400':
          $ref: './components/responses/errors.yaml#/components/responses/BadRequest'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    delete:
      summary: Delete conversation
      description: Delete a conversation and all associated messages
      operationId: deleteConversation
      tags: [Conversations]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: './components/schemas/conversation.yaml#/components/schemas/DeleteConversationRequest'
      responses:
        '200':
          description: Conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/conversation.yaml#/components/schemas/DeleteConversationResponse'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  # Message endpoints (nested under conversations)
  /users/{userId}/conversations/{conversationId}/messages:
    get:
      summary: List messages in a conversation
      description: Retrieve all messages in a specific conversation
      operationId: listMessages
      tags: [Messages]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/message.yaml#/components/schemas/ListMessagesResponse'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    post:
      summary: Create a new message
      description: Send a new message in a conversation
      operationId: createMessage
      tags: [Messages]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/message.yaml#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/message.yaml#/components/schemas/ListMessagesResponse'
        '400':
          $ref: './components/responses/errors.yaml#/components/responses/BadRequest'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

  /users/{userId}/conversations/{conversationId}/messages/{messageId}:
    get:
      summary: Get message by ID
      description: Retrieve a specific message by its ID
      operationId: getMessageById
      tags: [Messages]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
        - $ref: './components/parameters/common.yaml#/MessageIdPath'
      responses:
        '200':
          description: Message details retrieved successfully
          content:
            application/json:
              schema:
                $ref: './components/schemas/message.yaml#/components/schemas/Message'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    delete:
      summary: Delete message
      description: Delete a message from a conversation
      operationId: deleteMessage
      tags: [Messages]
      parameters:
        - $ref: './components/parameters/common.yaml#/UserIdPath'
        - $ref: './components/parameters/common.yaml#/ConversationIdPath'
        - $ref: './components/parameters/common.yaml#/MessageIdPath'
      responses:
        '204':
          $ref: './components/responses/errors.yaml#/components/responses/NoContent'
        '404':
          $ref: './components/responses/errors.yaml#/components/responses/NotFound'
        '500':
          $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'

components:
  schemas:
    # Import all schema components
    User:
      $ref: './components/schemas/user.yaml#/components/schemas/User'
    GoogleLoginRequest:
      $ref: './components/schemas/user.yaml#/components/schemas/GoogleLoginRequest'

    Conversation:
      $ref: './components/schemas/conversation.yaml#/components/schemas/Conversation'
    CreateConversationRequest:
      $ref: './components/schemas/conversation.yaml#/components/schemas/CreateConversationRequest'
    CreateConversationResponse:
      $ref: './components/schemas/conversation.yaml#/components/schemas/CreateConversationResponse'
    UpdateConversationRequest:
      $ref: './components/schemas/conversation.yaml#/components/schemas/UpdateConversationRequest'
    ListConversationsResponse:
      $ref: './components/schemas/conversation.yaml#/components/schemas/ListConversationsResponse'
    DeleteConversationRequest:
      $ref: './components/schemas/conversation.yaml#/components/schemas/DeleteConversationRequest'
    DeleteConversationResponse:
      $ref: './components/schemas/conversation.yaml#/components/schemas/DeleteConversationResponse'

    MessageType:
      $ref: './components/schemas/message.yaml#/components/schemas/MessageType'
    Message:
      $ref: './components/schemas/message.yaml#/components/schemas/Message'
    CreateMessageRequest:
      $ref: './components/schemas/message.yaml#/components/schemas/CreateMessageRequest'
    ListMessagesRequest:
      $ref: './components/schemas/message.yaml#/components/schemas/ListMessagesRequest'
    ListMessagesResponse:
      $ref: './components/schemas/message.yaml#/components/schemas/ListMessagesResponse'

    Error:
      $ref: './components/responses/errors.yaml#/components/schemas/Error'

  parameters:
    UserIdPath:
      $ref: './components/parameters/common.yaml#/UserIdPath'
    WorkoutIdPath:
      $ref: './components/parameters/common.yaml#/WorkoutIdPath'
    ExerciseIdPath:
      $ref: './components/parameters/common.yaml#/ExerciseIdPath'
    ConversationIdPath:
      $ref: './components/parameters/common.yaml#/ConversationIdPath'
    MessageIdPath:
      $ref: './components/parameters/common.yaml#/MessageIdPath'
    EmailPath:
      $ref: './components/parameters/common.yaml#/EmailPath'
    YearQuery:
      $ref: './components/parameters/common.yaml#/YearQuery'
    MonthQuery:
      $ref: './components/parameters/common.yaml#/MonthQuery'
    DayQuery:
      $ref: './components/parameters/common.yaml#/DayQuery'

  responses:
    BadRequest:
      $ref: './components/responses/errors.yaml#/components/responses/BadRequest'
    Unauthorized:
      $ref: './components/responses/errors.yaml#/components/responses/Unauthorized'
    Forbidden:
      $ref: './components/responses/errors.yaml#/components/responses/Forbidden'
    NotFound:
      $ref: './components/responses/errors.yaml#/components/responses/NotFound'
    Conflict:
      $ref: './components/responses/errors.yaml#/components/responses/Conflict'
    UnprocessableEntity:
      $ref: './components/responses/errors.yaml#/components/responses/UnprocessableEntity'
    InternalServerError:
      $ref: './components/responses/errors.yaml#/components/responses/InternalServerError'
    NoContent:
      $ref: './components/responses/errors.yaml#/components/responses/NoContent'